#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\end_header

\begin_body

\begin_layout Addchap
Preface
\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\renewcommand{\gunderline}[1]{\mathunderline{greenunder}{#1}}
{\underline{#1}}
\end_inset


\begin_inset FormulaMacro
\renewcommand{\bef}{\forwardcompose}
{\fatsemi}
\end_inset

The goal of this book is to teach programmers how to reason mathematically
 about types and code, in a way that is directly relevant to software practice.
\end_layout

\begin_layout Standard
The material is presented here at medium to advanced level.
 It requires a certain amount of mathematical experience and is not suitable
 for people who are unfamiliar with school-level algebra, or unwilling to
 learn difficult concepts through prolonged mental concentration and effort.
\end_layout

\begin_layout Standard
The first part is introductory and may be suitable for beginners in programming.
 Starting from Chapter
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:3-3-The-formal-logic-curry-howard"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the material becomes unsuitable for beginners.
 
\end_layout

\begin_layout Standard
The presentation in this book is self-contained.
 I define and explain all the required notations, concepts, and Scala language
 features.
 The emphasis is on clarity and understandability of all examples, mathematical
 notions, derivations, and code.
 To achieve a clearer presentation of the material, I use some 
\emph on
non-standard
\emph default
 notations (Appendix
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Appendix-Notations"
plural "false"
caps "false"
noprefix "false"

\end_inset

) and terminology (Appendix
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Appendix-Glossary-of-terms"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 The book does not assume familiarity with today's research literature in
 the theory of programming languages.
\end_layout

\begin_layout Standard
The main intent of this book is to explain the mathematical principles that
 guide the practice of functional programming – that is, help people to
 write code.
 Therefore, all mathematical developments in this book are motivated and
 justified by practical programming issues, and are accompanied by code
 examples that illustrate their usage.
 For example, the equational laws for standard typeclasses (functor, applicative
, monad, etc.) are first motivated heuristically before deriving a set of
 mathematical equations and formulating the laws in more abstract terms.
 Each new concept or technique is explained via solved examples and exercises.
 Answers to exercises are not provided, but it is verified that the exercises
 are doable and free of errors.
 More difficult examples and exercises are marked by an asterisk (*).
\end_layout

\begin_layout Standard
A software engineer needs to know only a few fragments of mathematical theory;
 namely, the fragments that answer questions arising in the practice of
 functional programming.
 So I keep the theoretical material to the minimum; 
\emph on
ars longa, vita brevis
\emph default
.
 I do not pursue mathematical generalizations beyond practical relevance
 or immediate pedagogical usefulness.
 This limits the scope of required mathematical knowledge to bare rudiments
 of category theory, type theory, and formal logic.
 For instance, I do not talk about 
\begin_inset Quotes eld
\end_inset

introduction/elimination rules
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

strong normalization
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

complete partial order domains
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

adjoint functors
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

limits
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

pullbacks
\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset

topoi
\begin_inset Quotes erd
\end_inset

, and do not use the word 
\begin_inset Quotes eld
\end_inset

algebra
\begin_inset Quotes erd
\end_inset

, because learning these concepts will not help a functional programmer
 write code.
 Instead, I focus on practically useful material – including some rarely
 mentioned constructions, e.g.
\begin_inset space ~
\end_inset

the 
\begin_inset Quotes eld
\end_inset

filterable functor
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

applicative contrafunctor
\begin_inset Quotes erd
\end_inset

 typeclasses.
\end_layout

\begin_layout Standard
All code examples in this book serve only for explanation and illustration,
 and are not optimized for performance or stack safety.
\end_layout

\begin_layout Standard
Some formatting conventions used in this book:
\end_layout

\begin_layout Itemize
Text in boldface indicates a new concept or term that is being defined.
 Text in italics is a logical emphasis.
 Example:
\end_layout

\begin_layout Quotation
An 
\series bold
aggregation
\begin_inset Index idx
status open

\begin_layout Plain Layout
aggregation
\end_layout

\end_inset


\series default
 is a function from a list of values to a 
\emph on
single
\emph default
 value.
\end_layout

\begin_layout Itemize
Sample Scala code is written inline using a small monospaced font, such
 as this: 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

val a = 
\begin_inset Quotes eld
\end_inset

xyz
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset

.
 Longer code examples are written in separate code blocks, which may also
 show the output from the Scala interpreter:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

val s = (1 to 10).toList
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> s.product
\end_layout

\begin_layout Plain Layout

res0: Int = 3628800 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Derivations of laws are written in a two-column notation where the right
 column contains the code and the left column indicates the property or
 law used to derive the expression at right.
 A green underline in the 
\emph on
previous
\emph default
 expression shows the part rewritten using the indicated law:
\begin_inset Formula 
\begin{align*}
\text{expect to equal }\text{pu}_{M}:\quad & \gunderline{\text{pu}_{M}^{\uparrow\text{Id}}}\bef\text{pu}_{M}\bef\text{ftn}_{M}\\
\text{lifting to the identity functor}:\quad & =\text{pu}_{M}\bef\gunderline{\text{pu}_{M}\bef\text{ftn}_{M}}\\
\text{left identity law for }M:\quad & =\text{pu}_{M}\quad.
\end{align*}

\end_inset

A green underline is sometimes also used at the 
\emph on
last
\emph default
 step of the derivation, to indicate the part of the expression that resulted
 from the most recent rewriting.
\end_layout

\end_body
\end_document
